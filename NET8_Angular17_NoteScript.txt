================================
üõ¥ .NET 8 with Angular 17  üõ¥
================================
‚úà DAY 1
-------------------------------------------------------
1: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ö‡∏ô Mac ‡πÅ‡∏•‡∏∞ Windows
2: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ .NET Core 8
3: ‡∏™‡∏£‡πâ‡∏≤‡∏á .NET 8 Rest API
-------------------------------------------------------
üõ†1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
üíª .NET SDK 8.x
---
dotnet --version

üíª Node JS 20.x and up
---
node -v
npm -v

üíª Angular CLI
---
ng version

üíª Docker Desktop
---
docker --version

üíª Git
---
git version

üíª VSCode
---
code -v

2: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ .NET Core 8
---
‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà .NET 6 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡∏°‡∏≤ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡πÑ‡∏î‡πâ 2 approaches ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ 

1. controller-based APIs
2. minimal APIs

Minimal API: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ quickly ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö

Controller-based API: ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏™‡∏π‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

Minimal API:
---
‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:

‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å
‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ lambda expression
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö async/await ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

‡∏à‡∏∏‡∏î‡∏î‡πâ‡∏≠‡∏¢:

‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏µ‡∏à‡∏≥‡∏Å‡∏±‡∏î
‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ routing ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô

Controller-based API:
---
‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô:

‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö API ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏á‡πà‡∏≤‡∏¢
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö middleware
‡∏à‡∏∏‡∏î‡∏î‡πâ‡∏≠‡∏¢:

‡πÇ‡∏Ñ‡πâ‡∏î‡∏¢‡∏≤‡∏ß ‡∏¢‡∏∏‡πà‡∏á‡∏¢‡∏≤‡∏Å
‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤ Minimal API

3: ‡∏™‡∏£‡πâ‡∏≤‡∏á .NET 8 Rest API

üöÄ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå .NET Core Web API ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô .NET 8
---
Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏ö‡∏£‡∏°‡∏ô‡∏µ‡πâ
---
mkdir DotnetCoreAngularOAC

Step 2: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Web APIs ‡πÅ‡∏ö‡∏ö Controller-based APIs
---
dotnet new webapi --use-controllers -o ControllerAPI

Step 3: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô VSCode
---
code ControllerAPI

Step 4: ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
---
dotnet watch run

üíª ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á REST API ‡∏î‡πâ‡∏ß‡∏¢ .NET Web API ‡πÅ‡∏ö‡∏ö Controller-base APIs
---
Step 1: ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå ControllerAPI ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå Controller/WeatherForecastController.cs
‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå WeatherForecast.cs

Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á model ‡πÉ‡∏ô Models/User
---
namespace ControllerAPI.Models;
public class User
{
    public int Id { get; set; }
    public required string Username { get; set; }
    public required string Email { get; set; }
    public required string Fullname { get; set; }
}


Step 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á UserController ‡πÉ‡∏ô Controllers
---
using Microsoft.AspNetCore.Mvc;
using WebApi.Models;

namespace ControllerAPI.Controllers;

[ApiController]
[Route("api/[controller]")] // api/User
public class UserController : ControllerBase
{
    // mock data for users
    private static readonly List<User> _users = new List<User>
    {
        new User { 
            Id = 1, 
            Username = "john", 
            Email = "john@email.com", 
            Fullname = "John Doe"
        },
        new User { 
            Id = 2, 
            Username = "samit", 
            Email = "samit@email.com", 
            Fullname = "Samit Koyom"
        },
    };

    // GET: api/User
    [HttpGet]
    public ActionResult<IEnumerable<User>> GetUsers()
    {
        // IEnumerable ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
        // IEnumerable ‡πÄ‡∏õ‡πá‡∏ô interface ‡πÉ‡∏ô .NET Framework ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô collection ‡∏Ç‡∏≠‡∏á object
        // interface ‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î method ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡∏∑‡∏≠ GetEnumerator()
        // GetEnumerator() : method ‡∏ô‡∏µ‡πâ return enumerator
        // enumerator : object ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡∏ú‡πà‡∏≤‡∏ô collection
        // ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ IEnumerable ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á users

        // ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡∏ú‡πà‡∏≤‡∏ô collection ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ foreach
        // foreach (var user in _users)
        // {
        //     Console.WriteLine($"{user.Id} - {user.Username}");
        // }

        return Ok(_users);
    }

    // GET: api/User/{id}
    [HttpGet("{id}")]
    public ActionResult<User> GetUser(int id)
    {
        var user = _users.Find(u => u.Id == id); // find user by id
        if (user == null)
        {
            return NotFound();
        }
        return Ok(user);
    }


    // POST: api/User
    [HttpPost]
    public ActionResult<User> CreateUser([FromBody] User user)
    {
        _users.Add(user);
        return CreatedAtAction(nameof(GetUser), new { id = user.Id }, user);
    }

    // PUT: api/User/{id}
    [HttpPut("{id}")]
    public IActionResult UpdateUser(int id, [FromBody] User user)
    {
        // Validate user id
        if (id != user.Id)
        {
            return BadRequest();
        }

        // Find existing user
        var existingUser = _users.Find(u => u.Id == id);
        if (existingUser == null)
        {
            return NotFound();
        }

        // Update user
        existingUser.Username = user.Username;
        existingUser.Email = user.Email;
        existingUser.Fullname = user.Fullname;

        // Return updated user
        return Ok(existingUser);
    }

    // DELETE: api/User/2
    [HttpDelete("{id}")]
    public ActionResult DeleteUser(int id)
    {
        // Find existing user
        var user = _users.Find(u => u.Id == id);

        if (user == null)
        {
            return NotFound();
        }

        // Remove user from list
        _users.Remove(user);
        return NoContent();
    }


}

-------------------------------------------------------
‚úà DAY 2
4:  Entity Framework Core ‡πÉ‡∏ô .NET 8 
5: .NET 8 Rest API CRUD with EFCore
-------------------------------------------------------
üöÄ WORKSHOP: StockAPI with EF8 MSSQL

Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå WebAPI
---
dotnet new webapi --use-controllers -o StockAPI

Step 2: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ VSCode
---
code StockAPI

"‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô EFCore ‡πÅ‡∏ö‡∏ö Database first"

Step 3: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MS SQL Server
---
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ‡∏ä‡∏∑‡πà‡∏≠ "StockDB"
---
CREATE DATABASE StockDB;

Step 4: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á "Category" ‡πÅ‡∏•‡∏∞ "Product"
---
‡∏ï‡∏≤‡∏£‡∏≤‡∏á "Category"
----
USE [StockDB]

GO

CREATE TABLE [dbo].[Category](
	[CategoryID] [int] IDENTITY(1,1) NOT NULL,
	[CategoryName] [varchar](64) NULL,
	[CategoryStatus] [int] NULL,
 CONSTRAINT [PK_Category] PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

---
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á "Category"
---
INSERT INTO dbo.Category (
    CategoryName,
    CategoryStatus
)

VALUES
(
    'Mobile',
    1
),
(
    'Tablet',
    1
),
(
    'Smart Watch',
    1
),
(
    'Laptop',
    1
);

---
‡∏ï‡∏≤‡∏£‡∏≤‡∏á  "Product"
---
USE [StockDB]

GO

CREATE TABLE [dbo].[Product](
	[ProductID] [int] IDENTITY(1,1) NOT NULL,
	[ProductName] [varchar](128) NULL,
	[UnitPrice] [decimal](18, 2) NULL,
	[UnitInStock] [int] NULL,
	[ProductPicture] [varchar](256) NULL,
	[CategoryID] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[ModifiedDate] [datetime] NULL,
 CONSTRAINT [PK_Product] PRIMARY KEY CLUSTERED 
(
	[ProductID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]

---
‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á "Product"
---
INSERT INTO dbo.Product (
    ProductName,
    UnitPrice,
    UnitInStock,
    ProductPicture,
    CategoryID,
    CreatedDate,
    ModifiedDate
)

VALUES
(
    'iPhone 13 Pro Max',
    55000,
    3,
    'https://www.mxphone.com/wp-content/uploads/2021/04/41117-79579-210401-iPhone12ProMax-xl-1200x675.jpg',
    1,
    '2021-11-22T00:00:00',
    '2021-11-22T00:00:00'
),
(
    'iPad Pro 2021',
    18500,
    10,
    'https://cdn.siamphone.com/spec/apple/images/ipad_pro_12.9%E2%80%91inch/com_1.jpg',
    2,
    '2021-11-20T00:00:00',
    '2021-11-20T00:00:00'
),
(
    'Airpods Pro',
    12500,
    5,
    'https://www.avtechguide.com/wp-content/uploads/2020/11/leaked-apple-airpods-pro-generation2-info_01-800x445.jpg',
    3,
    '2021-11-10T10:30:00',
    '2021-11-12T10:30:00'
),
(
    'Macbook Pro M1',
    45000,
    10,
    'https://cdn.mos.cms.futurecdn.net/iYCQTPgBSdDmkYESfPkunh.jpg',
    4,
    '2021-11-15T10:30:00',
    '2021-11-15T10:30:00'
);

Step 5: Install NuGet Packages for EF8 and MSSQL Server
---
dotnet add package Microsoft.EntityFrameworkCore --version 8.0.0
dotnet add package Microsoft.EntityFrameworkCore.Design --version 8.0.0
dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 8.0.0
dotnet add package Microsoft.EntityFrameworkCore.Relational --version 8.0.0

Step 6: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á dotnet-ef cli
---
‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
dotnet ef --version

‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô
dotnet tool install --global dotnet-ef

‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
dotnet tool update --global dotnet-ef

Step 7: ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Scaffold-DbContext (Reverse engineer)
---
SQL Server Authen
---
dotnet ef dbcontext scaffold ^"Server=SAMITZ50;^
Initial Catalog=StockDB;^
Persist Security Info=False;^
User ID=sa;^
Password=377040;^
MultipleActiveResultSets=True;^
Encrypt=True;^
TrustServerCertificate=True;^
Connection Timeout=30;^" ^
Microsoft.EntityFrameworkCore.SqlServer ^
--output-dir "Models" ^
--context ApplicationDbContext ^
--use-database-names ^
--no-onconfiguring ^
--no-pluralize ^
--force

Windows Authen
---
dotnet ef dbcontext scaffold ^"Server=SAMITZ50\SQLEXPRESS;^
Database=StockDB;^
TrustServerCertificate=True;^
Trusted_Connection=True;^" ^
Microsoft.EntityFrameworkCore.SqlServer ^
--output-dir Models ^
--context ApplicationDbContext ^
--use-database-names ^
--no-onconfiguring ^
--force

Step 8: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå appsettings.json ‡πÄ‡∏û‡∏¥‡πà‡∏° connection string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
---
    "DefaultConnection": "Data Source=SAMITPCGENIUS\\SQLEXPRESS;Initial Catalog=dotnetinvdb;User Id=sa;Password=377040;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False"

Step 9: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Package ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ Authentication ‡∏î‡πâ‡∏ß‡∏¢ JWT
---
dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 8.0.0
dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.0
dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version 8.0.0

Step 10: ‡πÄ‡∏û‡∏¥‡πà‡∏° JWT ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå appsettings.json
---
"JWT": {  
    "ValidAudience": "*",  
    "ValidIssuer": "*",  
    "Secret": "ByYM000OLlMQG6VVVp1OH7Xzyr7gHuw1qvUC5dcGt3SNM"  
  },

Step 11: ‡πÄ‡∏û‡∏¥‡πà‡∏° Config ‡∏Ç‡∏≠‡∏á JWT ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Program.cs
---
.
.
// Adding Identity
builder.Services.AddIdentity<IdentityUser, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddDefaultTokenProviders();

// Adding Authentication
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
})
// Adding Jwt Bearer
.AddJwtBearer(options  => {
    options.SaveToken = true;
    options.RequireHttpsMetadata = false;
    options.TokenValidationParameters = new TokenValidationParameters()
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidAudience = builder.Configuration.GetSection("JWT:ValidAudience").Value!,
        ValidIssuer = builder.Configuration.GetSection("JWT:ValidIssuer").Value!,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration.GetSection("JWT:Secret").Value!))
    };
});
.
.
builder.Services.AddSwaggerGen(
    options =>
    {
        options.SupportNonNullableReferenceTypes();
        options.SwaggerDoc("v1", new() { Title = "StockAPI", Version = "v1" });

        options.AddSecurityDefinition("Bearer",  new OpenApiSecurityScheme()
        {
            Name = "Authorization",
            Type = SecuritySchemeType.ApiKey,
            Scheme = "Bearer",
            BearerFormat= "JWT",
            In = ParameterLocation.Header,
            Description = "JWT Authorization header using the Bearer scheme."
        });

        options.AddSecurityRequirement(new OpenApiSecurityRequirement
        {
            {
                new OpenApiSecurityScheme
                {
                    Reference = new OpenApiReference
                    {
                        Type = ReferenceType.SecurityScheme,
                        Id = "Bearer"
                    }
                },
                new string[] {}
            }
        });
    }
);

.
.
// Add Authentication
app.UseAuthentication();

Step 12: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå Data/ApplicationDbContext.cs
---
 public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

}


Step 13: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå Migration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Auth
---
dotnet ef migrations add auth --context ApplicationDbContext

# ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö Migration
-
dotnet ef migrations remove

Step 14: ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Migrate ‡∏ï‡∏±‡∏ß Migration ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
---
dotnet ef database update

# ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ rollback ‡∏Å‡∏≤‡∏£ Migrate
-
dotnet ef database update 0

Step 15: ‡∏™‡∏£‡πâ‡∏≤‡∏á Model RegisterModel.cs
---
using System.ComponentModel.DataAnnotations;

namespace StockAPI.Models;

public class RegisterModel
{
    [Required(ErrorMessage = "Username is required")]
    [StringLength(50, ErrorMessage = "Username is too long")]
    [MinLength(3, ErrorMessage = "Username is too short")]
    public required string Username { get; set; }
    
    [Required(ErrorMessage = "Email is required")]
    [EmailAddress(ErrorMessage = "Email is not valid")]
    public required string Email { get; set; }
    
    [Required(ErrorMessage = "Password is required")]
    public required string Password { get; set; }
}

Step 16: ‡∏™‡∏£‡πâ‡∏≤‡∏á Model LoginModel.cs
---
using System.ComponentModel.DataAnnotations;

namespace StockAPI.Models;
public class LoginModel
{
    [Required(ErrorMessage = "Username is required")]
    [StringLength(50, ErrorMessage = "Username is too long")]
    [MinLength(3, ErrorMessage = "Username is too short")]
    public string? Username { get; set; }
    
    [Required(ErrorMessage = "Password is required")]
    public string? Password { get; set; }
}

Step 17: ‡∏™‡∏£‡πâ‡∏≤‡∏á Model UserRoles.cs
---
namespace StockAPI.Models;

public class UserRolesModel
{
    public const string Admin = "Admin";
    public const string Manager = "Manager";
    public const string User = "User";
}

Step 18: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå ResponseModel.cs ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API
---
namespace StockAPI.Models;

public class ResponseModel
{
    public string? Status { get; set; }
    public string? Message { get; set; }
}

Step 19: ‡∏™‡∏£‡πâ‡∏≤‡∏á Controller ‡∏ä‡∏∑‡πà‡∏≠ "AuthenticateController"
---
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using StockAPI.Models;

namespace StockAPI.Controllers;

[ApiController]
[Route("api/[controller]")]
public class AuthenticateController: ControllerBase
{
    private readonly UserManager<IdentityUser> _userManager;
    private readonly RoleManager<IdentityRole> _roleManager;
    private readonly IConfiguration _configuration;

    // Constructor
    public AuthenticateController(
        UserManager<IdentityUser> userManager, RoleManager<IdentityRole> roleManager, 
        IConfiguration configuration)
    {
        _userManager = userManager;
        _roleManager = roleManager;
        _configuration = configuration;
    }

    // Register for User
    // Post api/authenticate/register-user
    [HttpPost]
    [Route("register-user")]
    public async Task<ActionResult> RegisterUser([FromBody] RegisterModel model)
    {
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        var userExists = await _userManager.FindByNameAsync(model.Username);
        if (userExists != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "User already exists!"
                }
            );
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        userExists = await _userManager.FindByEmailAsync(model.Email);
        if (userExists != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "Email already exists!"
                }
            );
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á User
        IdentityUser user = new()
        {
            Email = model.Email,
            SecurityStamp = Guid.NewGuid().ToString(),
            UserName = model.Username
        };

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        var result = await _userManager.CreateAsync(user, model.Password);

        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if(!result.Succeeded)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "User creation failed! Please check user details and try again."
                }
            );
        }

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Roles Admin, Manager, User
        if (!await _roleManager.RoleExistsAsync(UserRolesModel.Admin))
        {
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.Admin));
        }

        if (!await _roleManager.RoleExistsAsync(UserRolesModel.Manager))
        {
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.Manager));
        }

        if (await _roleManager.RoleExistsAsync(UserRolesModel.User))
        {
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.User));
            await _userManager.AddToRoleAsync(user, UserRolesModel.User);
        }

        return Ok(new ResponseModel
        {
            Status = "Success",
            Message = "User registered successfully"
        });
    }


    // Register for Manager
    // Post api/authenticate/register-manger
    [HttpPost]
    [Route("register-manger")]
    public async Task<ActionResult> RegisterManager([FromBody] RegisterModel model)
    {
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        var userExists = await _userManager.FindByNameAsync(model.Username);
        if (userExists != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "User already exists!"
                }
            );
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        userExists = await _userManager.FindByEmailAsync(model.Email);
        if (userExists != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "Email already exists!"
                }
            );
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á User
        IdentityUser user = new()
        {
            Email = model.Email,
            SecurityStamp = Guid.NewGuid().ToString(),
            UserName = model.Username
        };

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        var result = await _userManager.CreateAsync(user, model.Password);

        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if(!result.Succeeded)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "User creation failed! Please check user details and try again."
                }
            );
        }

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Roles Admin, Manager, User
        if (!await _roleManager.RoleExistsAsync(UserRolesModel.Admin)){
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.Admin));
        }

        if (!await _roleManager.RoleExistsAsync(UserRolesModel.User)){
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.User));
        }

        if (await _roleManager.RoleExistsAsync(UserRolesModel.Manager)){
            await _userManager.AddToRoleAsync(user, UserRolesModel.Manager);
        }

        return Ok(new ResponseModel
        {
            Status = "Success",
            Message = "User registered successfully"
        });
    }

    // Register for Admin
    // Post api/authenticate/register-manger
    [HttpPost]
    [Route("register-admin")]
    public async Task<ActionResult> RegisterAdmin([FromBody] RegisterModel model)
    {
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ username ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        var userExists = await _userManager.FindByNameAsync(model.Username);
        if (userExists != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "User already exists!"
                }
            );
        }

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ email ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        userExists = await _userManager.FindByEmailAsync(model.Email);
        if (userExists != null)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "Email already exists!"
                }
            );
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á User
        IdentityUser user = new()
        {
            Email = model.Email,
            SecurityStamp = Guid.NewGuid().ToString(),
            UserName = model.Username
        };

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        var result = await _userManager.CreateAsync(user, model.Password);

        // ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if(!result.Succeeded)
        {
            return StatusCode(
                StatusCodes.Status500InternalServerError,
                new ResponseModel
                {
                    Status = "Error",
                    Message = "User creation failed! Please check user details and try again."
                }
            );
        }

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Roles Admin, Manager, User
        if (await _roleManager.RoleExistsAsync(UserRolesModel.Admin)){
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.Admin));
            await _userManager.AddToRoleAsync(user, UserRolesModel.Admin);
        }

        if (!await _roleManager.RoleExistsAsync(UserRolesModel.User)){
            await _roleManager.CreateAsync(new IdentityRole(UserRolesModel.User));
        }

        if (!await _roleManager.RoleExistsAsync(UserRolesModel.Manager)){
            await _userManager.AddToRoleAsync(user, UserRolesModel.Manager);
        }

        return Ok(new ResponseModel
        {
            Status = "Success",
            Message = "User registered successfully"
        });
    }

    // Login for User
    // Post api/authenticate/login-user
    [HttpPost("login")]
    public async Task<ActionResult> Login([FromBody] LoginModel model)
    {

        var user = await _userManager.FindByNameAsync(model.Username!);

        // ‡∏ñ‡πâ‡∏≤ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if(user != null && await _userManager.CheckPasswordAsync(user, model.Password!))
        {
            var userRoles = await _userManager.GetRolesAsync(user);

            var authClaims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.UserName!),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            };

            foreach (var userRole in userRoles)
            {
                authClaims.Add(new Claim(ClaimTypes.Role, userRole));
            }

            var token = GetToken(authClaims);

            return Ok(new 
            {
                token = new JwtSecurityTokenHandler().WriteToken(token),
                expiration = token.ValidTo
            });
        }

        // ‡∏ñ‡πâ‡∏≤ login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return Unauthorized();
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Token
    private JwtSecurityToken GetToken(List<Claim> authClaims)
    {
        var authSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["JWT:Secret"]!));

        var timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("SE Asia Standard Time"); // Windows time zone ID

        // Get the current time in Bangkok time zone
        var currentTime = TimeZoneInfo.ConvertTime(DateTime.UtcNow, timeZoneInfo);

        var token = new JwtSecurityToken(
            issuer: _configuration["JWT:ValidIssuer"],
            audience: _configuration["JWT:ValidAudience"],
            expires: currentTime.AddHours(3),
            claims: authClaims,
            signingCredentials: new SigningCredentials(authSigningKey, SecurityAlgorithms.HmacSha256)
        );

        return token;
    }
}

-------------------------------------------------------
‚úà DAY 3
6:  Entity Framework Identity ‡πÉ‡∏ô .NET 8
-------------------------------------------------------
---
Use Raw SQL Query
---
// var product = _context.Product.FromSqlRaw(
//     "SELECT p.ProductID, p.ProductName, p.UnitPrice, p.UnitInStock, p.CategoryID, p.ProductPicture, p.CreatedDate, p.ModifiedDate, c.CategoryName FROM Product p INNER JOIN Category c ON p.CategoryID = c.CategoryID WHERE p.ProductID = {0}",
// id).FirstOrDefault();

---
Create View in SQL Server
---
CREATE VIEW vw_ProductDetails
AS
SELECT 
    p.ProductID,
    p.ProductName,
    p.UnitPrice,
    p.UnitInStock,
    p.CategoryID,
    p.ProductPicture,
    p.CreatedDate,
    p.ModifiedDate,
    c.CategoryName
FROM 
    Product p
JOIN 
    Category c ON p.CategoryID = c.CategoryID;

---
Use View in EFCore
---
var product = _context.ProductDetails.FromSqlRaw("SELECT * FROM vw_ProductDetails WHERE ProductID = {0}", id).FirstOrDefault();

// Read from views in database
using (var command = _context.Database.GetDbConnection().CreateCommand())
{
    command.CommandText = "SELECT * FROM vw_ProductDetails WHERE ProductID = @productId";
    command.Parameters.Add(new SqlParameter("@productId", id));
    _context.Database.OpenConnection();
    
    using (var result = command.ExecuteReader())
    {
        var list = new List<dynamic>();
        while (result.Read())
        {
            dynamic item = new ExpandoObject();
            for (int i = 0; i < result.FieldCount; i++)
            {
                ((IDictionary<string, object>)item).Add(result.GetName(i), result[i]);
            }
            list.Add(item);
        }
        return Ok(list);
    }
}

---
Create Stored Procedure
---
CREATE PROCEDURE GetProductDetails
    @ProductID INT
AS
BEGIN
    SELECT 
        p.ProductID,
        p.ProductName,
        p.UnitPrice,
        p.UnitInStock,
        p.CategoryID,
        p.ProductPicture,
        p.CreatedDate,
        p.ModifiedDate,
        c.CategoryName
    FROM 
        Product p
    JOIN 
        Category c ON p.CategoryID = c.CategoryID
    WHERE 
        p.ProductID = @ProductID;
END;

---
Use Stored Procedure
---
// Call Stored Procedure
var param = new SqlParameter("@ProductID", id);

var product = _context.Product
    .FromSqlRaw("EXEC GetProductDetails @ProductID", param)
    .AsEnumerable()
    .FirstOrDefault();

or

using (var command = _context.Database.GetDbConnection().CreateCommand())
{
    command.CommandText = "EXEC GetProductDetails @ProductID";
    command.CommandType = CommandType.Text;
    command.Parameters.Add(new SqlParameter("@ProductID", id));

    _context.Database.OpenConnection();
    using (var result = command.ExecuteReader())
    {
        if(result.Read()){
            var product = new {
                ProductID = result.GetInt32(0),
                ProductName = result.GetString(1),
                UnitPrice = result.GetDecimal(2),
                UnitInStock = result.GetInt32(3),
                CategoryID = result.GetInt32(4),
                ProductPicture = result.GetString(5),
                CreatedDate = result.GetDateTime(6),
                ModifiedDate = result.GetDateTime(7),
                CategoryName = result.GetString(8)
            };

            return Ok(product);
        }
    }
}

---
Build and Publish .NET Core Web API
---
dotnet publish -o ./Publish -c Release

---
Download Install the ASP.NET Core Module/Hosting Bundle
---
https://dotnet.microsoft.com/permalink/dotnetcore-current-windows-runtime-bundle-installer

-------------------------------------------------------
‚úà DAY 4
7:  ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô Angular 17 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á UI
-------------------------------------------------------
üöÄ WORKSHOP: StockUI with Angular 17

Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Angular ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏ö‡∏ö no standalone component
---
ng new angular-stock-aoc --no-standalone

? Which stylesheet format would you like to use?
  CSS             [ https://developer.mozilla.org/docs/Web/CSS                     ] 
> Sass (SCSS)     [ https://sass-lang.com/documentation/syntax#scss                ] 
  Sass (Indented) [ https://sass-lang.com/documentation/syntax#the-indented-syntax ] 
  Less            [ http://lesscss.org                                             ]

? Which stylesheet format would you like to use? Sass (SCSS)     [ https://sass-lang.com/documentation/syntax#scss                ]
? Do you want to enable Server-Side Rendering (SSR) and Static Site Generation (SSG/Prerendering)? (y/N) N

Step 2: ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô VSCode
---
code angular-stock-aoc -r

Step 3: ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
---
ng serve

- ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô port ‡πÅ‡∏•‡∏∞ host ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
ng serve --port 4200 --host 0.0.0.0

- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Angular ‡∏ú‡πà‡∏≤‡∏ô browser
http://localhost:4200

Step 4: Setup Material Design
---
ng add @angular/material

‚Ñπ Using package manager: npm
‚úî Found compatible package version: @angular/material@17.3.5.
‚úî Package information loaded.
The package @angular/material@17.3.5 will be installed and executed.
Would you like to proceed? (Y/n) Y

‚úî Packages successfully installed.
? Choose a prebuilt theme name, or "custom" for a custom theme:
  Indigo/Pink        [ Preview: https://material.angular.io?theme=indigo-pink ]      
  Deep Purple/Amber  [ Preview: https://material.angular.io?theme=deeppurple-amber ] 
  Pink/Blue Grey     [ Preview: https://material.angular.io?theme=pink-bluegrey ]    
  Purple/Green       [ Preview: https://material.angular.io?theme=purple-green ]     
> Custom

‚úî Packages successfully installed.
? Choose a prebuilt theme name, or "custom" for a custom theme: Custom
? Set up global Angular Material typography styles? (y/N) y

‚úî Packages successfully installed.
? Choose a prebuilt theme name, or "custom" for a custom theme: Custom
? Set up global Angular Material typography styles? Yes  
? Include the Angular animations module? (Use arrow keys)
> Include and enable animations
  Include, but disable animations
  Do not include

Step 5: ‡∏™‡∏£‡πâ‡∏≤‡∏á material module
---
ng g m material --module=app

# ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
---
.angular
.git
node_modules
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ app
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ material
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ material.module.ts <-- ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app-routing.module.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app.component.html
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app.component.scss
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app.component.spec.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app.component.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app.module.ts
‚îÇ   ‚îú‚îÄ‚îÄ assets
‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îú‚îÄ‚îÄ main.ts
‚îÇ   ‚îú‚îÄ‚îÄ styles.scss
‚îú‚îÄ‚îÄ .editorconfig
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ angular.json
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ tsconfig.app.json
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ tsconfig.spec.json

Step 6: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå material.module.ts
---
import { NgModule } from '@angular/core'
import { CommonModule } from '@angular/common'

// Material Form Controls
import { MatAutocompleteModule } from '@angular/material/autocomplete'
import { MatCheckboxModule } from '@angular/material/checkbox'
import { MatDatepickerModule } from '@angular/material/datepicker'
import { MatNativeDateModule } from '@angular/material/core'
import { MatFormFieldModule } from '@angular/material/form-field'
import { MatInputModule } from '@angular/material/input'
import { MatRadioModule } from '@angular/material/radio'
import { MatSelectModule } from '@angular/material/select'
import { MatSliderModule } from '@angular/material/slider'
import { MatSlideToggleModule } from '@angular/material/slide-toggle'

// Material Navigation
import { MatMenuModule } from '@angular/material/menu'
import { MatSidenavModule } from '@angular/material/sidenav'
import { MatToolbarModule } from '@angular/material/toolbar'

// Material Layout
import { MatCardModule } from '@angular/material/card'
import { MatDividerModule } from '@angular/material/divider'
import { MatExpansionModule } from '@angular/material/expansion'
import { MatGridListModule } from '@angular/material/grid-list'
import { MatListModule } from '@angular/material/list'
import { MatStepperModule } from '@angular/material/stepper'
import { MatTabsModule } from '@angular/material/tabs'
import { MatTreeModule } from '@angular/material/tree'

// Material Buttons & Indicators
import { MatButtonModule } from '@angular/material/button'
import { MatButtonToggleModule } from '@angular/material/button-toggle'
import { MatBadgeModule } from '@angular/material/badge'
import { MatChipsModule } from '@angular/material/chips'
import { MatIconModule } from '@angular/material/icon'
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner'
import { MatProgressBarModule } from '@angular/material/progress-bar'
import { MatRippleModule } from '@angular/material/core'

// Material Popups & Modals
import { MatBottomSheetModule } from '@angular/material/bottom-sheet'
import { MatDialogModule } from '@angular/material/dialog'
import { MatSnackBarModule } from '@angular/material/snack-bar'
import { MatTooltipModule } from '@angular/material/tooltip'

// Material Data tables
import { MatPaginatorModule } from '@angular/material/paginator'
import { MatSortModule } from '@angular/material/sort'
import { MatTableModule } from '@angular/material/table'

@NgModule({
  declarations: [],
  imports: [
    CommonModule,
    MatAutocompleteModule,
    MatCheckboxModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatFormFieldModule,
    MatInputModule,
    MatRadioModule,
    MatSelectModule,
    MatSliderModule,
    MatSlideToggleModule,
    MatMenuModule,
    MatSidenavModule,
    MatToolbarModule,
    MatCardModule,
    MatDividerModule,
    MatExpansionModule,
    MatGridListModule,
    MatListModule,
    MatStepperModule,
    MatTabsModule,
    MatTreeModule,
    MatButtonModule,
    MatButtonToggleModule,
    MatBadgeModule,
    MatChipsModule,
    MatIconModule,
    MatProgressSpinnerModule,
    MatProgressBarModule,
    MatRippleModule,
    MatBottomSheetModule,
    MatDialogModule,
    MatSnackBarModule,
    MatTooltipModule,
    MatPaginatorModule,
    MatSortModule,
    MatTableModule,
  ],
  exports: [
    MatAutocompleteModule,
    MatCheckboxModule,
    MatDatepickerModule,
    MatFormFieldModule,
    MatInputModule,
    MatRadioModule,
    MatSelectModule,
    MatSliderModule,
    MatSlideToggleModule,
    MatMenuModule,
    MatSidenavModule,
    MatToolbarModule,
    MatCardModule,
    MatDividerModule,
    MatExpansionModule,
    MatGridListModule,
    MatListModule,
    MatStepperModule,
    MatTabsModule,
    MatTreeModule,
    MatButtonModule,
    MatButtonToggleModule,
    MatBadgeModule,
    MatChipsModule,
    MatIconModule,
    MatProgressSpinnerModule,
    MatProgressBarModule,
    MatRippleModule,
    MatBottomSheetModule,
    MatDialogModule,
    MatSnackBarModule,
    MatTooltipModule,
    MatPaginatorModule,
    MatSortModule,
    MatTableModule,
  ],
})
export class MaterialModule {}

Step 7: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå app.module.ts
---
.
.
import { MaterialModule } from './material/material.module' <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
.
.
@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    BrowserAnimationsModule,
    MaterialModule <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
  ],
  providers: [
    provideAnimationsAsync()
  ],
  bootstrap: [AppComponent]
})

Step 8: ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Material Design ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå app.component.html
---
<mat-card>
  <mat-card-header>
    <mat-card-title>
      <h1>Material Design</h1>
    </mat-card-title>
  </mat-card-header>
  <mat-card-content>
    <p>Material Design is a design language developed by Google in 2014. Expanding on the "card" motifs that debuted in Google Now, Material Design uses more grid-based layouts, responsive animations and transitions, padding, and depth effects such as lighting and shadows.</p>

    <button mat-raised-button color="primary">Primary</button>
    <button mat-fab color="accent">
        <mat-icon>add</mat-icon>
    </button>
  </mat-card-content>
</mat-card>

- ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà
- https://fonts.google.com/icons
- https://www.angularjswiki.com/angular/angular-material-icons-list-mat-icon-list/

Step 9: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Tailwind CSS
---
npm install -D tailwindcss postcss autoprefixer

Step 10: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå tailwind.config.js
---
npx tailwindcss init

Step 11: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå tailwind.config.js
---
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./src/**/*.{html,ts}"],
  theme: {
    extend: {
      gridTemplateColumns: {
        fluid: "repeat(auto-fit, minmax(11rem, 1fr))",
      },
    },
  },
  plugins: [],
  corePlugins: {
    preflight: false,
  },
};

Step 12: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå styles.scss ‡πÉ‡∏ô src/styles.scss
---
@tailwind base;
@tailwind components;
@tailwind utilities;

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Noto Sans Thai", sans-serif; }

.form-container {
  display: flex;
  flex-direction: column;
}

.form-container > * {
  margin-top: 15px;
  width: 100%;
}

// Fix blue border in button caused by bs4
button:focus,
button:active:focus,
button.active:focus {
  outline: none !important;
  outline-style: none !important;
}

.mat-mdc-outlined-button {
  background-color: rgb(255, 235, 235) !important;
}

Step 13: Material Custom Theme ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå theme.scss ‡πÉ‡∏ô src/theme.scss
---
@use "@angular/material" as mat;
@include mat.core();

$typography-config: mat.define-typography-config(
  $font-family: '"Noto Sans Thai", sans-serif',
  $headline-1:
    mat.define-typography-level(112px, 112px, 300, $letter-spacing: -0.05em),
  $headline-2:
    mat.define-typography-level(56px, 56px, 400, $letter-spacing: -0.02em),
  $headline-3:
    mat.define-typography-level(45px, 48px, 400, $letter-spacing: -0.005em),
  $headline-4: mat.define-typography-level(34px, 40px, 400),
  $headline-5: mat.define-typography-level(24px, 32px, 400),
  $headline-6: mat.define-typography-level(20px, 32px, 400),
  $subtitle-1: mat.define-typography-level(16px, 28px, 400),
  $body-1: mat.define-typography-level(14px, 20px, 400),
  $body-2: mat.define-typography-level(14px, 20px, 400),
  $subtitle-2: mat.define-typography-level(16px, 28px, 400),
  $caption: mat.define-typography-level(12px, 20px, 400),
  $button: mat.define-typography-level(14px, 14px, 500),
);

$my-primary: mat.define-palette(mat.$red-palette, 700);
$my-accent: mat.define-palette(mat.$purple-palette, A400);
$my-warn: mat.define-palette(mat.$red-palette, 800);

$my-theme: mat.define-light-theme(
  (
    color: (
      primary: $my-primary,
      accent: $my-accent,
      warn: $my-warn,
    ),
    typography: $typography-config,
    density: 0,
  )
);

@include mat.all-component-themes($my-theme);

Step 14: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå angular.json
---
.
.
"styles": [
    "src/theme.scss",
    "src/styles.scss"
],
.
.

Step 15: ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Material Design ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå app.component.html
---
<mat-card>
  <mat-card-header>
    <mat-card-title>
      <h1 class="text-blue-600 underline">Material Design</h1>
    </mat-card-title>
  </mat-card-header>
  <mat-card-content>
    <p>Material Design is a design language developed by Google in 2014. Expanding on the "card" motifs that debuted in Google Now, Material Design uses more grid-based layouts, responsive animations and transitions, padding, and depth effects such as lighting and shadows.</p>

    <button mat-raised-button color="primary">Primary</button>
    <button mat-fab color="accent">
        <mat-icon>add</mat-icon>
    </button>
  </mat-card-content>

    <mat-card-actions>
        <button mat-button>LIKE</button>
        <button mat-button>SHARE</button>
    </mat-card-actions>
</mat-card>

<router-outlet />

Step 16: Material Font Custom
---
- copy font family from https://fonts.google.com/,  copy font link and paste in index.html (head)

<link
    href="https://fonts.googleapis.com/css2?family=Noto+Sans+Thai:wght@100;200;300;400;500;600;700&display=swap"
    rel="stylesheet"
/>

Step 17: ‡∏™‡∏£‡πâ‡∏≤‡∏á Component ‡∏ä‡∏∑‡πà‡∏≠ "header"
---
ng g c components/header --skip-tests

# ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
---
.angular
.git
node_modules
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ app
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ material
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ material.module.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app-routing.module.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app.component.html
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app.component.scss
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app.component.spec.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app.component.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app.module.ts
‚îÇ   ‚îú‚îÄ‚îÄ assets
‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îú‚îÄ‚îÄ main.ts
‚îÇ   ‚îú‚îÄ‚îÄ styles.scss
‚îú‚îÄ‚îÄ .editorconfig
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ angular.json
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ tsconfig.app.json
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ tsconfig.spec.json

Step 18: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå header.component.html
---
<mat-toolbar color="primary" class="flex flex-row">
    <mat-toolbar-row>
      <!-- toggle button -->
      <button *ngIf="isOpened" mat-icon-button (click)="onToggleSidenav()">
        <mat-icon>menu</mat-icon>
      </button>
      <a id="home-button" (click)="onToggleSidenav()"
        ><div class="mat-body1">V. {{ version }}</div></a
      >
  
      <!-- center title -->
      <div style="flex: 0.9"></div>
      <div class="mat-body2">
        ITGENIUS {{ pageName }}
      </div>
      <div style="flex: 1"></div>
  
      <!-- logout button -->
      <span>
        <button
          mat-icon-button
          [matMenuTriggerFor]="menu"
          aria-label="Example icon-button with a menu"
          class="ml-auto"
        >
          <img
            height="40"
            width="40"
            [src]="'assets/images/itglogo.png'"
            alt="IT Genius Logo"
          />
        </button>
        <mat-menu #menu="matMenu">
          <button mat-menu-item (click)="onClickSignout()">
            <mat-icon>lock</mat-icon>
            <span>‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</span>
          </button>
        </mat-menu>
      </span>
    </mat-toolbar-row>
</mat-toolbar>

Step 19: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå header.component.ts
---
import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core'

@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrl: './header.component.scss'
})
export class HeaderComponent implements OnInit {

  @Output() sidenavToggle = new EventEmitter<void>();
  @Input() isOpened?: boolean

  pageName: string = 'Stock'
  version = '1.0.0'

  constructor() { }

  ngOnInit(): void {
  }

  onToggleSidenav() {
    this.sidenavToggle.emit();
  }

  onClickSignout() {
    // Add signout logic here
  }

}

Step 20: ‡∏™‡∏£‡πâ‡∏≤‡∏á Component ‡∏ä‡∏∑‡πà‡∏≠ "menu"
---
ng g c components/menu --skip-tests

# ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
---
.angular
.git
node_modules
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ app
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.component.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ material
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ material.module.ts
.

Step 21: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå menu.component.html
---
<mat-nav-list class="container">
    <img
      *ngIf="isOpened"
      [src]="'assets/images/angular_logo.png'"
      alt=""
      width="100%"
    />
  
    <!-- menu button when collapse -->
    <div
      *ngIf="!isOpened"
      class="!bg-red-500 h-[64px] flex justify-center items-center"
    >
      <button
        class="!bg-red-500 !text-white"
        mat-icon-button
        (click)="onToggleSidenav()"
      >
        <mat-icon>menu</mat-icon>
      </button>
    </div>
  
    <div style="height: 8px"></div>
  
    <a mat-list-item routerLink="/stock" routerLinkActive="active">
      <mat-icon>dashboard</mat-icon>
      <span *ngIf="isOpened" class="nav-caption">Stock</span>
    </a>
  
    <mat-divider> </mat-divider>
  
    <a mat-list-item routerLink="/shop" routerLinkActive="active">
      <mat-icon>shop</mat-icon>
      <span *ngIf="isOpened" class="nav-caption">Shop</span>
    </a>
    <mat-divider> </mat-divider>
    <a mat-list-item routerLink="/report" routerLinkActive="active">
      <mat-icon>pie_chart</mat-icon>
      <span *ngIf="isOpened" class="nav-caption">Report</span>
    </a>
  
    <mat-divider> </mat-divider>
  
    <a mat-list-item routerLink="/transaction" routerLinkActive="active">
      <mat-icon>history</mat-icon>
      <span *ngIf="isOpened" class="nav-caption">Transaction (Optional)</span>
    </a>
    <mat-divider> </mat-divider>
  </mat-nav-list>
  
Step 22: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå menu.component.scss
---
.container {
  padding: 0px !important;
}

.nav-caption {
  margin-left: 10px;
}
a.active {
  background-color: rgba(103, 58, 183, 0.15);
  color: #673ab7;
}

.mat-icon {
  font-size: 25px;
}

.nav-caption {
  margin-left: 30px;
  font-size: 16px;
}

Step 23: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå menu.component.ts
---
import { Component,OnInit, Output, EventEmitter, Input } from '@angular/core'

@Component({
  selector: 'app-menu',
  templateUrl: './menu.component.html',
  styleUrl: './menu.component.scss'
})
export class MenuComponent implements OnInit {

  @Input() isOpened?: boolean;
  @Output() sidenavToggle = new EventEmitter<void>();

  constructor() {}

  ngOnInit() {}

  onToggleSidenav() {
    this.sidenavToggle.emit();
  }

}

Step 24: ‡∏™‡∏£‡πâ‡∏≤‡∏á Component ‡∏ä‡∏∑‡πà‡∏≠ "login"
---
ng g c components/login --skip-tests

# ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
---
.angular
.git
node_modules
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ app
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.component.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.component.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ material
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ material.module.ts
.

Step 25: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå login.component.html
---
<mat-card class="mt-5 login-box">
    <img
      alt="banner"
      mat-card-image
      [src]="'assets/images/angular_logo.png'"
      height="200"
    />
    <mat-card-header>
      <mat-card-title>Login</mat-card-title>
    </mat-card-header>
    <form #loginForm="ngForm" (submit)="null">
      <mat-card-content style="display: flex; flex-direction: column">
        <!-- Username -->
        <mat-form-field>
          <mat-label>Username</mat-label>
          <input ngModel name="username" matInput />
          <mat-icon matSuffix>account_box</mat-icon>
        </mat-form-field>
  
        <!-- Password -->
        <mat-form-field>
          <mat-label>Password</mat-label>
          <input
            ngModel
            name="password"
            matInput
            [type]="hide ? 'password' : 'text'"
          />
          <button
            type="button"
            mat-icon-button
            matSuffix
            (click)="hide = !hide"
            [attr.aria-label]="'Hide password'"
            [attr.aria-pressed]="hide"
          >
            <mat-icon>{{ hide ? "visibility_off" : "visibility" }}</mat-icon>
          </button>
        </mat-form-field>
  
        <div *ngIf="error" style="color: red">{{ error }}</div>
      </mat-card-content>
      <mat-card-actions class="flex justify-center w-full">
        <button mat-raised-button type="submit" color="primary" mat-button class="mr-3">
          Login
        </button>
        <button
          mat-flat-button
          type="button"
          (click)="onClickRegister()"
          mat-button
        >
          Register
        </button>
      </mat-card-actions>
    </form>
  </mat-card>
  
Step 26: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå login.component.scss
---
:host {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  background: url("/assets/images/angular_background.jpg") no-repeat center
    center;
  background-size: cover;
}

.login-box {
  height: auto;
  padding-bottom: 20px;
}

.mat-form-field {
  width: 100%;
}

mat-card-title,
mat-card-content {
  display: flex;
  justify-content: center;
}

.error {
  padding: 16px;
  width: 300px;
  color: white;
  background-color: red;
}

.button {
  display: flex;
  justify-content: flex-end;
}


Step 27: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå login.component.ts
---
import { Component } from '@angular/core'
import { Router } from '@angular/router'

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrl: './login.component.scss'
})
export class LoginComponent {

  hide = true
  error?: string | null = null

  constructor(private router: Router) { }

  onClickRegister() {
    this.router.navigate(['/register']);
  }

}

Step 28: ‡πÄ‡∏û‡∏¥‡πà‡∏° FormsModule ‡πÉ‡∏ô app.module.ts
---
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
.
.
imports: [
    .
    .
    FormsModule,
    ReactiveFormsModule
],

Step 29: ‡∏™‡∏£‡πâ‡∏≤‡∏á Component ‡∏ä‡∏∑‡πà‡∏≠ "register"
---
ng g c components/register --skip-tests

# ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ
---
.angular
.git
node_modules
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ app
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.component.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.component.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ register
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ register.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ register.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ register.component.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ material
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ material.module.ts
.

Step 30: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå register.component.html
---
<mat-card class="mt-5 register-box">
    <img
      mat-card-image
      [src]="'assets/images/angular_logo.png'"
      height="200"
    />
    <mat-card-header>
      <mat-card-title>Register</mat-card-title>
    </mat-card-header>
    <form #loginForm="ngForm" (submit)="null">
      <mat-card-content style="display: flex; flex-direction: column">
        
        <!-- Username -->
        <mat-form-field>
          <mat-label>Username</mat-label>
          <input ngModel name="username" matInput placeholder="Username" />
          <mat-icon matSuffix>account_box</mat-icon>
        </mat-form-field>

        <!-- Email -->
        <mat-form-field>
          <mat-label>Email</mat-label>
          <input ngModel name="email" matInput placeholder="Email" />
          <mat-icon matSuffix>email</mat-icon>
        </mat-form-field>
  
        <!-- Password -->
        <mat-form-field>
          <mat-label>Password</mat-label>
          <input
            ngModel
            name="password"
            matInput
            [type]="hide ? 'password' : 'text'"
          />
          <button
            type="button"
            mat-icon-button
            matSuffix
            (click)="hide = !hide"
            [attr.aria-label]="'Hide password'"
            [attr.aria-pressed]="hide"
          >
            <mat-icon>{{ hide ? "visibility_off" : "visibility" }}</mat-icon>
          </button>
        </mat-form-field>
      </mat-card-content>
      <mat-card-actions class="flex justify-center w-full">
        <button mat-raised-button type="submit" color="primary" mat-button class="mr-3">
          Register
        </button>
        <button
          mat-flat-button
          type="button"
          (click)="onClickCancel()"
          mat-button
        >
          Back to login
        </button>
      </mat-card-actions>
    </form>
</mat-card>  

Step 31: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå register.component.scss
---
:host {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  background: url("/assets/images/angular_background.jpg") no-repeat center
    center;
  background-size: cover;
}

.register-box {
  height: auto;
  padding-bottom: 20px;
}

.mat-form-field {
  width: 100%;
}

mat-card-title,
mat-card-content {
  display: flex;
  justify-content: center;
}

.error {
  padding: 16px;
  width: 300px;
  color: white;
  background-color: red;
}

.button {
  display: flex;
  justify-content: flex-end;
}

Step 32: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå register.component.ts
---
import { Component, OnInit } from '@angular/core'
import { Router } from '@angular/router'

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrl: './register.component.scss'
})
export class RegisterComponent implements OnInit {

  hide = true
  error?: string | null = null

  constructor(private router: Router) { }

  ngOnInit(): void {
  }

  async onSubmit() {
    // Do something
  }

  onClickCancel() {
    this.router.navigate(['/login']);
  }

}

Step 33: ‡∏™‡∏£‡πâ‡∏≤‡∏á Component ‡∏ä‡∏∑‡πà‡∏≠ "stock"
---
ng g c components/stock --skip-tests

.angular
.git
node_modules
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ app
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ header.component.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ menu.component.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.component.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ register
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ register.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ register.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ register.component.ts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ stock
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ stock.component.html
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ stock.component.scss
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ stock.component.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ material
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ material.module.ts
.

Step 34: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå stock.component.html
---
<div class="flex flex-row justify-center mt-10">
    <mat-card class="w-[95%]">
      <div class="flex flex-row justify-between">
        <mat-card-header>
          <mat-card-title>Stock Management</mat-card-title>
          <mat-card-subtitle>10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</mat-card-subtitle>
        </mat-card-header>
        <button
          [routerLink]="['/stock/create']"
          mat-fab
          class="add-btn"
          style="margin-right: 60px"
        >
          <mat-icon style="font-size: 25px">add</mat-icon>
        </button>
      </div>
      <mat-card-content>
        <mat-form-field class="w-full">
          <input
            class="w-100"
            matInput
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
            [(ngModel)]="searchValue"
            (keyup)="doFilter($event)"
          />
          <button
            *ngIf="searchValue"
            matSuffix
            mat-icon-button
            aria-label="Clear"
            (click)="clearSearch()"
          >
            <mat-icon class="!text-sm">close</mat-icon>
          </button>
        </mat-form-field>
  
        <table
          mat-table
          #table
          [dataSource]="dataSource.data"
          class="w-full table-hovor"
          matSort
          matSortActive="productId"
          matSortDirection="desc"
        >
          <!-- Id -->
          <ng-container matColumnDef="productId">
            <th mat-header-cell *matHeaderCellDef mat-sort-header>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà</th>
            <td mat-cell *matCellDef="let row">{{ row.productId }}</td>
          </ng-container>
  
          <!-- Image -->
          <ng-container matColumnDef="image">
            <th mat-header-cell *matHeaderCellDef style="text-align: center">
              ‡∏£‡∏π‡∏õ
            </th>
            <td mat-cell *matCellDef="let row">
              <img
                src="{{ row.image }}"
                height="50px"
                class="mat-image-cell"
              />
            </td>
          </ng-container>
  
          <!-- Name -->
          <ng-container matColumnDef="name">
            <th mat-header-cell *matHeaderCellDef mat-sort-header>‡∏ä‡∏∑‡πà‡∏≠</th>
            <td mat-cell *matCellDef="let row">{{ row.name }}</td>
          </ng-container>
  
          <!-- Price -->
          <ng-container matColumnDef="price">
            <th mat-header-cell *matHeaderCellDef mat-sort-header>‡∏£‡∏≤‡∏Ñ‡∏≤</th>
            <td mat-cell *matCellDef="let row">
              <span style="margin-right: 16px">
                ‡∏ø {{ row.price | number : "1.2-2" }}
              </span>
            </td>
          </ng-container>
  
          <!-- Stock -->
          <ng-container matColumnDef="stock">
            <th mat-header-cell *matHeaderCellDef mat-sort-header>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
            <td mat-cell *matCellDef="let row">
              <span style="margin-right: 16px">
                {{ row.stock | number }} pcs.
              </span>
            </td>
          </ng-container>
  
          <!-- Actions -->
          <ng-container matColumnDef="action">
            <th mat-header-cell *matHeaderCellDef style="text-align: center">
              ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
            </th>
            <td mat-cell *matCellDef="let row" style="text-align: center">
              <button
                [routerLink]="['/stock/edit/' + row.productId]"
                mat-raised-button
                class="edit-btn"
              >
                ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
              </button>
              |
              <button
                (click)="onClickDelete(row)"
                mat-raised-button
                class="delete-btn"
              >
                ‡∏•‡∏ö
              </button>
            </td>
          </ng-container>
  
          <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
          <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
        </table>
  
        <div
          class="flex justify-center mt-5 mat-display-3"
          *ngIf="dataSource.data.length === 0"
        >
          No records found
        </div>
  
        <mat-paginator [pageSize]="10" [pageSizeOptions]="[5, 10, 15, 25, 100]">
        </mat-paginator>
      </mat-card-content>
    </mat-card>
  </div>
  
Step 35: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå stock.component.scss
---
@use "@angular/material" as mat;

.mat-icon {
  font-size: 50px;
}

.mat-header-cell {
  font-size: 20px;
}

.mat-image-cell {
  padding: 4px;
}

.edit-btn {
  color: white !important;
  background-color: mat.get-color-from-palette(
    mat.define-palette(mat.$deep-purple-palette),
    400
  ) !important;
}

.delete-btn {
  color: white !important;
  background-color: mat.get-color-from-palette(
    mat.define-palette(mat.$red-palette),
    400
  ) !important;
}

.add-btn {
  margin-top: 10px;
  color: white !important;
  background-color: mat.get-color-from-palette(
    mat.define-palette(mat.$pink-palette),
    400
  ) !important;
}

.table-hovor .mat-mdc-row:hover {
  background-color: rgba(172, 255, 47, 0.215);
}

Step 36: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå stock.component.ts
---
import { Component, OnInit } from '@angular/core'
import { Subject } from 'rxjs'

@Component({
  selector: 'app-stock',
  templateUrl: './stock.component.html',
  styleUrl: './stock.component.scss'
})
export class StockComponent implements OnInit {

  displayedColumns = ['productId', 'image', 'name', 'price', 'stock', 'action']

  // sample datasource
  dataSource = {
    data: [
      { productId: 1, image: 'image1', name: 'name1', price: 100, stock: 10 },
      { productId: 2, image: 'image2', name: 'name2', price: 200, stock: 20 },
      { productId: 3, image: 'image3', name: 'name3', price: 300, stock: 30 },
      { productId: 4, image: 'image4', name: 'name4', price: 400, stock: 40 },
      { productId: 5, image: 'image5', name: 'name5', price: 500, stock: 50 },
      { productId: 6, image: 'image6', name: 'name6', price: 600, stock: 60 },
      { productId: 7, image: 'image7', name: 'name7', price: 700, stock: 70 },
      { productId: 8, image: 'image8', name: 'name8', price: 800, stock: 80 },
      { productId: 9, image: 'image9', name: 'name9', price: 900, stock: 90 },
      { productId: 10, image: 'image10', name: 'name10', price: 1000, stock: 100 }
    ],
    filter: ''
  }

  searchValue = ''
  searchTerm = new Subject<string>()

  constructor() {}
  ngOnInit(): void {}

  async doFilter(event: any) {
    // do local
    // this.dataSource.filter = event.target.value.trim();
    // do remote
    // this.dataSource.data = await lastValueFrom(
    //   this.rest.getProductByKeyword(event.target.value)
    // );
  }

  onClickDelete(row: any) {
    // do remote
    // this.dataSource.data = await lastValueFrom(
    //   this.rest.deleteProduct(this.selectedProduct)
    // );
  }

  clearSearch() {
    this.searchValue = '';
    this.searchTerm.next('');
  }

}

Step 37: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå app.component.html
---
<mat-sidenav-container autosize>

  <mat-sidenav
    #sidenav
    mode="side"
    opened="isExpanded"
    *ngIf="isLoggedIn"
    [ngStyle]="{ width: isExpanded ? '270px' : '65px' }"
    style="
      background-size: cover !important;
      background: url('../assets/images/background_menu.jpg') no-repeat center;
    "
  >
    <!-- Menu -->
    <app-menu
      [isOpened]="isExpanded"
      (sidenavToggle)="isExpanded = !isExpanded"
    ></app-menu>

  </mat-sidenav>

  <mat-sidenav-content class="mat-sidenav-content">
    <!-- Header -->
    <app-header
      [isOpened]="isExpanded"
      *ngIf="isLoggedIn"
      (sidenavToggle)="isExpanded = !isExpanded"
    ></app-header>

    <!-- Page Content -->
    <router-outlet></router-outlet>
  </mat-sidenav-content>
  
</mat-sidenav-container>

Step 38: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå app.component.scss
---
.example-container {
  width: 100%;
  height: 100%;
}

mat-drawer-content {
  padding: 0px;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}

mat-sidenav-container,
mat-sidenav-content,
mat-sidenav {
  height: 100%;
}

mat-sidenav {
  width: 250px;
}


Step 39: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå app.component.ts
---
import { Component, ViewChild } from '@angular/core'

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.scss'
})
export class AppComponent {
  isExpanded = true
  isLoggedIn = true

  @ViewChild('sidenav', { static: true }) sidenav: any
  constructor() {}

  toggleSideBar() {
    this.sidenav.toggle();
  }
}

Step 40: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå app-routing.module.ts
---
import { NgModule } from '@angular/core'
import { RouterModule, Routes } from '@angular/router'
import { LoginComponent } from './components/login/login.component'
import { RegisterComponent } from './components/register/register.component'
import { StockComponent } from './components/stock/stock.component'

const routes: Routes = [
  { path: '', pathMatch: 'full', redirectTo: 'login' },
  { path: 'login', component: LoginComponent, data: { title: 'Login' } },
  { path: 'register', component: RegisterComponent },
  { path: 'stock', component: StockComponent },
  { path: '**', redirectTo: 'login' }, // undefined pages
]

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

Step 41: ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
---
ng serve --open

Step 42: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î API URL ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå environments/environment.prod.ts ‡πÅ‡∏•‡∏∞ environment.ts
---
environments/environment.ts
--
export const environment = {
    production: false,
    dotnet_api_url: 'http://demo.dotnetcoreoac.com/api/',
    dotnet_api_url_image: 'http://demo.dotnetcoreoac.com/uploads/',
    base_url: '',
    token: '',
    version: '1.0',
}

environments/environment.prod.ts
---
export const environment = {
    production: true,
    dotnet_api_url: 'http://demo.dotnetcoreoac.com/api/',
    dotnet_api_url_image: 'http://demo.dotnetcoreoac.com/uploads/',
    base_url: '',
    token: '',
    version: '1.0',
}

Step 43: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
---
ng g s services/user --skip-tests

import { Observable } from 'rxjs'
import { HttpClient, HttpHeaders } from '@angular/common/http'
import { Injectable } from '@angular/core'
import { environment } from '../../environments/environment'
import { UserModelLogin, UserModelRegister  } from '../models/user.model'

@Injectable({
  providedIn: 'root'
})
export class UserService {

  private apiURL = environment.dotnet_api_url

  // Header
  httpOptions  = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    })
  }

  constructor(private http: HttpClient) { }

  // Method for Login
  Login(data: UserModelLogin): Observable<UserModelLogin> {
    return this.http.post<UserModelLogin>(
      this.apiURL + 'Authenticate/login', 
      data, 
      this.httpOptions
    )
  }

  // Method for Register
  Register(data: UserModelRegister): Observable<UserModelRegister> {
    return this.http.post<UserModelRegister>(
      this.apiURL + 'Authenticate/register-user', 
      data, 
      this.httpOptions
    )
  }

  // Method for Logout
  Logout() {
    // Remove token from local storage
    localStorage.removeItem('token')
    return this.http.post(this.apiURL + 'Authenticate/logout', this.httpOptions)
  }

}

Step 44: ‡∏™‡∏£‡πâ‡∏≤‡∏á custom alert dialog
---
ng g c components/alertDialog --skip-tests

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå alert-dialog.componentt.html
---
<div style="width: 350px">
    <div *ngIf="data.icon" class="flex justify-center w-full h-12 mt-6">
        <mat-icon  [style.color]="data.iconColor" style="font-size: 64px; height: 64px; width: 64px;">
            {{ data.icon }}
        </mat-icon>
    </div>
    <h1 mat-dialog-title>{{ data.title }}</h1>
    <div mat-dialog-content class="mat-typography">
        <h3 class="mat-small">{{ data.subtitle }}</h3>
    </div>
    <div mat-dialog-actions align="center" class="!mb-4">
        <button mat-button (click)="closeDialog()" color="primary">‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á</button>
    </div>
</div>

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå dalert-dialog.component.ts
---
import { Component, OnInit, Inject } from '@angular/core'
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog'

@Component({
  selector: 'app-alert-dialog',
  templateUrl: './alert-dialog.component.html',
  styleUrl: './alert-dialog.component.scss'
})
export class AlertDialogComponent implements OnInit {

  constructor(
    public dialogRef: MatDialogRef<AlertDialogComponent>,
    @Inject(MAT_DIALOG_DATA)
    public data: any
  ) { }

  ngOnInit(): void {
  }

  closeDialog(): void {
    this.dialogRef.close(null)
  }

}


Step 45: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå login.component.html
---
<mat-card class="mt-5 login-box">
  <img
    alt="banner"
    mat-card-image
    [src]="'assets/images/angular_logo.jpg'"
    height="auto"
  />
  <mat-card-header>
    <mat-card-title>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö</mat-card-title>
  </mat-card-header>

  <form [formGroup]="loginForm" (ngSubmit)="submitLogin()">
    <mat-card-content style="display: flex; flex-direction: column">
      
      <!-- Username -->
      <mat-form-field>
        <mat-label>Username</mat-label>
        <input 
          name="username"
          id="username"
          formControlName="username" 
          matInput />
        <mat-icon matSuffix>account_box</mat-icon>
      </mat-form-field>

      <!-- Password -->
      <mat-form-field>
        <mat-label>Password</mat-label>
        <input
          name="password"
          id="password"
          formControlName="password"
          matInput
          [type]="hide ? 'password' : 'text'"
        />
        <button
          type="button"
          mat-icon-button
          matSuffix
          (click)="hide = !hide"
          [attr.aria-label]="'Hide password'"
          [attr.aria-pressed]="hide"
        >
          <mat-icon>{{ hide ? "visibility_off" : "visibility" }}</mat-icon>
        </button>
      </mat-form-field>
    </mat-card-content>
    <mat-card-actions class="flex justify-center w-full">
      <button mat-raised-button type="submit" color="primary" mat-button class="mr-3">
        ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
      </button>
      <button
        mat-flat-button
        type="button"
        (click)="onClickRegister()"
        mat-button
      >
        ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      </button>
    </mat-card-actions>
  </form>

</mat-card>

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå login.component.scss
---
:host {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  background: url("/assets/images/bg_angular.jpg") no-repeat center
    center;
  background-size: cover;
}

.login-box {
  width: 400px;
  height: auto;
  padding-bottom: 20px;
}

.mat-form-field {
  width: 100%;
}

mat-card-title,
mat-card-content {
  display: flex;
  justify-content: center;
}

.error {
  padding: 16px;
  width: 300px;
  color: white;
  background-color: red;
}

.button {
  display: flex;
  justify-content: flex-end;
}

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå login.component.ts
---
import { Component, OnInit } from '@angular/core'
import { Router } from '@angular/router'
import { FormGroup, FormBuilder, Validators } from '@angular/forms'
import { UserService } from '../../services/user.service'
import { MatDialog } from '@angular/material/dialog'
import { AlertDialogComponent } from '../alert-dialog/alert-dialog.component'

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrl: './login.component.scss',
})
export class LoginComponent implements OnInit {
  // Form Validation
  loginForm!: FormGroup

  // Variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
  userData = {
    username: '',
    password: '',
  }

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á password
  hide = true

  constructor(
    private router: Router,
    private formBuilder: FormBuilder,
    private http: UserService,
    private dialog: MatDialog
  ) {}

  ngOnInit() {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö Form
    this.loginForm = this.formBuilder.group({
      username: ['', Validators.required],
      password: ['', [Validators.required, Validators.minLength(8)]],
    })
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Submit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Login
  submitLogin() {
    if (this.loginForm.invalid) {
      this.dialog.open(AlertDialogComponent, {
        data: {
          title: '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          icon: 'error',
          iconColor: 'red',
          subtitle: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
        },
      })
    } else {
      this.userData.username = this.loginForm.value.username
      this.userData.password = this.loginForm.value.password

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Login
      this.http.Login(this.userData).subscribe({
        
        next: (data: any) => {
          if (data.token != null) {
            this.dialog.open(AlertDialogComponent, {
              data: {
                title: 'Login Success',
                icon: 'check_circle',
                iconColor: 'green',
                subtitle: 'Welcome to our website.',
              },
            })

            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Token ‡∏•‡∏á Local Storage
            localStorage.setItem('token', data.token)
            window.location.href = '/stock'
          }
        },

        error: (error) => {
          console.log(error)
          this.dialog.open(AlertDialogComponent, {
            data: {
              title: '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
              icon: 'error',
              iconColor: 'red',
              subtitle: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            },
          })
        },

      })
    }
  }

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Register
  onClickRegister() {
    this.router.navigate(['/register'])
  }
}

Step 46: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå register.component.html
---
<mat-card class="mt-5 register-box">
    <img
      mat-card-image
      [src]="'assets/images/angular_logo.jpg'"
      height="auto"
    />
    <mat-card-header>
      <mat-card-title>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</mat-card-title>
    </mat-card-header>

    <form [formGroup]="registerForm" (ngSubmit)="submitRegister()">
      <mat-card-content style="display: flex; flex-direction: column">
        
         <!-- Username -->
         <mat-form-field>
          <mat-label>Username</mat-label>
          <input 
            name="username" 
            id="username"
            formControlName="username" 
            matInput 
            placeholder="Username"
           />
          <mat-icon matSuffix>account_box</mat-icon>
        </mat-form-field>


        <!-- Email -->
        <mat-form-field>
          <mat-label>Email</mat-label>
          <input 
            name="email" 
            id="email"
            formControlName="email"
            matInput 
            placeholder="Email" />
          <mat-icon matSuffix>email</mat-icon>
        </mat-form-field>
  
        <!-- Password -->
        <mat-form-field>
          <mat-label>Password</mat-label>
          <input
            name="password"
            id="password"
            formControlName="password"
            matInput
            [type]="hide ? 'password' : 'text'"
          />
          <button
            type="button"
            mat-icon-button
            matSuffix
            (click)="hide = !hide"
            [attr.aria-label]="'Hide password'"
            [attr.aria-pressed]="hide"
          >
            <mat-icon>{{ hide ? "visibility_off" : "visibility" }}</mat-icon>
          </button>
        </mat-form-field>
        
      </mat-card-content>
      <mat-card-actions class="flex justify-center w-full">
        <button mat-raised-button type="submit" color="primary" mat-button class="mr-3">
          ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        </button>
        <button
          mat-flat-button
          type="button"
          (click)="onClickCancel()"
          mat-button
        >
          ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        </button>
      </mat-card-actions>
    </form>
</mat-card>

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå register.component.scss
---
:host {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  background: url("/assets/images/bg_angular.jpg") no-repeat center
    center;
  background-size: cover;
}

.register-box {
  width: 400px;
  height: auto;
  padding-bottom: 20px;
}

.mat-form-field {
  width: 100%;
}

mat-card-title,
mat-card-content {
  display: flex;
  justify-content: center;
}

.error {
  padding: 16px;
  width: 300px;
  color: white;
  background-color: red;
}

.button {
  display: flex;
  justify-content: flex-end;
}


‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå register.component.ts
---
import { Component, OnInit } from '@angular/core'
import { Router } from '@angular/router'
import { FormGroup, FormBuilder, Validators } from '@angular/forms'
import { UserService } from '../../services/user.service'
import { MatDialog } from '@angular/material/dialog'
import { AlertDialogComponent } from '../alert-dialog/alert-dialog.component'

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrl: './register.component.scss',
})
export class RegisterComponent implements OnInit {
  registerForm!: FormGroup

  // Variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
  userData = {
    username: '',
    email: '',
    password: '',
  }

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á password
  hide = true

  constructor(
    private router: Router,
    private formBuilder: FormBuilder,
    private http: UserService,
    private dialog: MatDialog
  ) {}

  ngOnInit(): void {
    // Validate form
    this.registerForm = this.formBuilder.group({
      username: ['', [Validators.required, Validators.minLength(3)]],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(8)]],
    })
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Submit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Register
  submitRegister() {
    if (this.registerForm.invalid) {
      this.dialog.open(AlertDialogComponent, {
        data: {
          title: '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          icon: 'error',
          iconColor: 'red',
          subtitle: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
        },
      })
    } else {
      this.userData.username = this.registerForm.value.username
      this.userData.email = this.registerForm.value.email
      this.userData.password = this.registerForm.value.password

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Register
      this.http.Register(this.userData).subscribe({
        next: (data: any) => {
          console.log(data)
          if (data.status === 'Success') {
            this.dialog.open(AlertDialogComponent, {
              data: {
                title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                icon: 'check_circle',
                iconColor: 'green',
                subtitle: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
              },
            })
            this.router.navigate(['/login'])
          } else {
            this.dialog.open(AlertDialogComponent, {
              data: {
                title: '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
                icon: 'error',
                iconColor: 'red',
                subtitle: '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
              },
            })
          }
        },
        error: (error: any) => {
          console.log(error)
          this.dialog.open(AlertDialogComponent, {
            data: {
              title: '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
              icon: 'error',
              iconColor: 'red',
              subtitle: error.error.message,
            },
          })
        },
      })
    }
  }

  onClickCancel() {
    this.router.navigate(['/login'])
  }
}


-------------------------------------------------------
‚úà DAY 5
8: Angular Auth Guard
9: Angular Interceptor
10: Angular CRUD Operation
-------------------------------------------------------
Step 1: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç dotnetapi ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå AuthenticateController.cs ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Login
---
// Login for User
// Post api/authenticate/login-user
[HttpPost("login")]
public async Task<ActionResult> Login([FromBody] LoginModel model)
{

    var user = await _userManager.FindByNameAsync(model.Username!);

    // ‡∏ñ‡πâ‡∏≤ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if(user != null && await _userManager.CheckPasswordAsync(user, model.Password!))
    {
        var userRoles = await _userManager.GetRolesAsync(user);

        var authClaims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, user.UserName!),
            new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
        };

        foreach (var userRole in userRoles)
        {
            authClaims.Add(new Claim(ClaimTypes.Role, userRole));
        }

        var token = GetToken(authClaims);

        return Ok(new 
        {
            token = new JwtSecurityTokenHandler().WriteToken(token),
            expiration = token.ValidTo,
            userData = new {
                userName = user.UserName,
                email = user.Email,
                roles = userRoles
            }
        });
    }

    // ‡∏ñ‡πâ‡∏≤ login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    return Unauthorized();
}

Step 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á AuthService ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Token
---
ng g s services/auth --skip-tests

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå auth.service.ts
---
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class AuthService {

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  userProfile = {
    "username": "",
    "email": "",
    "role": "",
    "token": ""
  }

  constructor(private route: Router) { }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö user ‡∏•‡∏á local storage
  setUser(user: any){
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡∏•‡∏á local storage
    localStorage.setItem("LoggedInUser", user['username'])
    localStorage.setItem("LoggedInEmail", user['email'])
    localStorage.setItem("LoggedInRole", user['role'])
    localStorage.setItem("LoggedInToken", user['token'])
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏Ç‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö getUser ‡∏à‡∏≤‡∏Å local storage
  getUser(){
    this.userProfile.username = localStorage.getItem("LoggedInUser") || ""
    this.userProfile.email = localStorage.getItem("LoggedInEmail") || ""
    this.userProfile.role = localStorage.getItem("LoggedInRole") || ""
    this.userProfile.token = localStorage.getItem("LoggedInToken") || ""
    return this.userProfile
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£ Login
  isLoggedIn(){
    return this.getUser().token !== ""
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Logout
  logout(){
    localStorage.removeItem("LoggedInUser")
    localStorage.removeItem("LoggedInEmail")
    localStorage.removeItem("LoggedInRole")
    localStorage.removeItem("LoggedInToken")
    this.route.navigate(['/login'])
  }

}

Step 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á Guard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö AuthGuard
---
ng g g auth/auth --skip-tests

? Which type of guard would you like to create? (Press <space> to select, <a> to toggle all, <i> to invert selection, and <enter> to proceed)
>(*) CanActivate
 ( ) CanActivateChild
 ( ) CanDeactivate
 ( ) CanMatch

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå auth.guard.ts
---
import { inject } from '@angular/core'
import { CanActivateFn, Router } from '@angular/router'
import { AuthService } from './../services/auth.service'

export const authenGuard: CanActivateFn = (route, state) => {
  const router = inject(Router)
  const rest = inject(AuthService)

  // console.log('authenGuard', rest.isLoggedIn())

  if (rest.isLoggedIn()) {
    // already logged-in
    if (state.url == '/login' || state.url == '/register') {
      router.navigate(['stock'])
    }
    return true
  } else {
    // not yet logged-in
    if (state.url != '/login') {
      router.navigate(['login'])
    }
    return true
  }
}

Step 4: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ login.component.ts
---
import { AuthService } from '../../services/auth.service'
.
.
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ Login
  userLogin = {
    "username": "",
    "email": "",
    "role": "",
    "token": ""
}

constructor(
    private auth: AuthService,
    private router: Router,
    private formBuilder: FormBuilder,
    private http: UserService,
    private dialog: MatDialog
) {}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Submit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Login
  submitLogin() {
    if (this.loginForm.invalid) {
      this.dialog.open(AlertDialogComponent, {
        data: {
          title: '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          icon: 'error',
          iconColor: 'red',
          subtitle: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
        },
      })
    } else {
      this.userData.username = this.loginForm.value.username
      this.userData.password = this.loginForm.value.password

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Login
      this.http.Login(this.userData).subscribe({
        
        next: (data: any) => {
          if (data.token != null) {

            this.dialog.open(AlertDialogComponent, {
              data: {
                title: 'Login Success',
                icon: 'check_circle',
                iconColor: 'green',
                subtitle: 'Welcome to our website.',
              },
            })

            this.userLogin = {
              "username": data.userData.userName,
              "email": data.userData.email,
              "role": data.userData.roles[0],
              "token": data.token
            }

            // console.log(this.userLogin)

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á local storage
            this.auth.setUser(this.userLogin)

            // delay 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(() => {
              // Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ backend
              window.location.href = '/stock'
            }, 2000);

          }
        },

        error: (error) => {
          console.log(error)
          this.dialog.open(AlertDialogComponent, {
            data: {
              title: '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
              icon: 'error',
              iconColor: 'red',
              subtitle: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            },
          })
        },

      })
    }
  }

Step 5: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå app-routing.module.ts
---
import { NgModule } from '@angular/core'
import { RouterModule, Routes } from '@angular/router'
import { LoginComponent } from './components/login/login.component'
import { RegisterComponent } from './components/register/register.component'
import { StockComponent } from './components/stock/stock.component'

// Auth Guard
import { authenGuard } from './auth/auth.guard'

const routes: Routes = [
  { path: '', pathMatch: 'full', redirectTo: 'login' },
  { 
    path: 'login', 
    component: LoginComponent,
    canActivate: [authenGuard], 
    data: { title: 'Login' } 
  },
  { 
    path: 'register', 
    component: RegisterComponent,
    canActivate: [authenGuard], 
  },
  { 
    path: 'stock', 
    component: StockComponent,
    canActivate: [authenGuard],
  },
  { path: '**', redirectTo: 'login' }, // undefined pages
]

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

Step 6: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå header.component.ts ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Logout
---
import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core'
import { AuthService } from '../../services/auth.service'

@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrl: './header.component.scss'
})
export class HeaderComponent implements OnInit {

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÑ‡∏ß‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà Login
  userProfile: any = {
    "username": "",
    "email": "",
    "role": ""
  }

  @Output() sidenavToggle = new EventEmitter<void>();
  @Input() isOpened?: boolean

  pageName: string = 'STOCK'
  version = '1.0.0'

  constructor(
    private auth: AuthService
  ) {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà Login ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
    this.userProfile.username = this.auth.getUser().username
    this.userProfile.email = this.auth.getUser().email
    this.userProfile.role = this.auth.getUser().role
  }

  ngOnInit(): void {
  }

  onToggleSidenav() {
    this.sidenavToggle.emit();
  }

  onClickSignout() {
    this.auth.logout()
    window.location.href = '/login'
  }

}

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå header.component.html
---
.
.
<div class="flex flex-col my-2 text-end">
    <span class="text-sm line-clamp-1">{{ userProfile.username }}</span>
    <span class="text-sm line-clamp-1">{{ userProfile.email }}</span>
</div>
.


Step 7: ‡∏™‡∏£‡πâ‡∏≤‡∏á product model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ CRUD
---
ng g class models/product.model --skip-tests

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå product.model.ts
---
export class ProductModel {
    productID!: number
    productName!: string
    unitPrice!: number
    unitInStock!: number
    productPicture!: string
    categoryID!: number
    categoryName!: string;
    categoryStatus!: number;
    createdDate!: Date
    modifiedDate!: Date
}


Step 8: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå product.service.ts ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CRUD
---
ng g s services/product --skip-tests

‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå product.service.ts
---

